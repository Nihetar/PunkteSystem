// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PunkteSystem.EFCore;

#nullable disable

namespace PunkteSystem.Migrations
{
    [DbContext(typeof(SchwimmerContext))]
    partial class SchwimmerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PunkteSystem.Model.Gruppe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("gruppen", (string)null);
                });

            modelBuilder.Entity("PunkteSystem.Model.Schwimmer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Geburtsdatum")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Gruppe")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("GruppeId")
                        .HasColumnType("integer");

                    b.Property<int>("GruppenId")
                        .HasColumnType("integer");

                    b.Property<string>("Nachname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Punkte")
                        .HasColumnType("integer");

                    b.Property<string>("Vorname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GruppeId");

                    b.ToTable("schwimmer", (string)null);
                });

            modelBuilder.Entity("PunkteSystem.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Benutzername")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("GruppenId")
                        .HasColumnType("integer");

                    b.Property<string>("PasswortHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Zeit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("SchwimmerId")
                        .HasColumnType("integer");

                    b.Property<string>("Strecke")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ZeitStrecke")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SchwimmerId");

                    b.ToTable("zeiten", (string)null);
                });

            modelBuilder.Entity("PunkteSystem.Model.Gruppe", b =>
                {
                    b.HasOne("PunkteSystem.Model.User", null)
                        .WithMany("Gruppen")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("PunkteSystem.Model.Schwimmer", b =>
                {
                    b.HasOne("PunkteSystem.Model.Gruppe", null)
                        .WithMany("Schwimmers")
                        .HasForeignKey("GruppeId");

                    b.OwnsOne("PunkteSystem.Model.Brust", "Brust", b1 =>
                        {
                            b1.Property<int>("SchwimmerId")
                                .HasColumnType("integer");

                            b1.Property<bool>("ArmeNichtGestreckt")
                                .HasColumnType("boolean");

                            b1.Property<bool>("BeinSchere")
                                .HasColumnType("boolean");

                            b1.Property<bool>("GabelFinger")
                                .HasColumnType("boolean");

                            b1.Property<bool>("KeineSchwimmstrucktur")
                                .HasColumnType("boolean");

                            b1.Property<bool>("KnieAnBrust")
                                .HasColumnType("boolean");

                            b1.Property<bool>("KopfFalsch")
                                .HasColumnType("boolean");

                            b1.HasKey("SchwimmerId");

                            b1.ToTable("schwimmer");

                            b1.WithOwner()
                                .HasForeignKey("SchwimmerId");
                        });

                    b.OwnsOne("PunkteSystem.Model.Grundfertigkeiten", "Grundfertigkeiten", b1 =>
                        {
                            b1.Property<int>("SchwimmerId")
                                .HasColumnType("integer");

                            b1.Property<bool>("Atmen")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Drehen")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Fortbewegen")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Gleiten")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Rollen")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Springen")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Tauchen")
                                .HasColumnType("boolean");

                            b1.HasKey("SchwimmerId");

                            b1.ToTable("schwimmer");

                            b1.WithOwner()
                                .HasForeignKey("SchwimmerId");
                        });

                    b.OwnsOne("PunkteSystem.Model.Kraul", "Kraul", b1 =>
                        {
                            b1.Property<int>("SchwimmerId")
                                .HasColumnType("integer");

                            b1.Property<bool>("ArmeNichtGestreckt")
                                .HasColumnType("boolean");

                            b1.Property<bool>("ArmeUnkoodiniert")
                                .HasColumnType("boolean");

                            b1.Property<bool>("ArmeUnterwasserFalsch")
                                .HasColumnType("boolean");

                            b1.Property<bool>("AtmungFalsch")
                                .HasColumnType("boolean");

                            b1.Property<bool>("BeineNichtGestreckt")
                                .HasColumnType("boolean");

                            b1.Property<bool>("BeineUnregelmaessig")
                                .HasColumnType("boolean");

                            b1.Property<bool>("KopfNichtGeradeNachUnten")
                                .HasColumnType("boolean");

                            b1.HasKey("SchwimmerId");

                            b1.ToTable("schwimmer");

                            b1.WithOwner()
                                .HasForeignKey("SchwimmerId");
                        });

                    b.OwnsOne("PunkteSystem.Model.Ruecken", "Ruecken", b1 =>
                        {
                            b1.Property<int>("SchwimmerId")
                                .HasColumnType("integer");

                            b1.Property<bool>("ArmeNichtAmOhr")
                                .HasColumnType("boolean");

                            b1.Property<bool>("ArmeUnkoodiniert")
                                .HasColumnType("boolean");

                            b1.Property<bool>("ArmeUnterwasserFalsch")
                                .HasColumnType("boolean");

                            b1.Property<bool>("BauchUnten")
                                .HasColumnType("boolean");

                            b1.Property<bool>("BeineNichtGestreckt")
                                .HasColumnType("boolean");

                            b1.Property<bool>("BeineUnregelmaessig")
                                .HasColumnType("boolean");

                            b1.Property<bool>("HuefteNichtGerade")
                                .HasColumnType("boolean");

                            b1.Property<bool>("KopfNichtGerade")
                                .HasColumnType("boolean");

                            b1.HasKey("SchwimmerId");

                            b1.ToTable("schwimmer");

                            b1.WithOwner()
                                .HasForeignKey("SchwimmerId");
                        });

                    b.OwnsOne("PunkteSystem.Model.Schwimmstile", "Schwimmstile", b1 =>
                        {
                            b1.Property<int>("SchwimmerId")
                                .HasColumnType("integer");

                            b1.Property<bool>("GrobBrust")
                                .HasColumnType("boolean");

                            b1.Property<bool>("GrobKraul")
                                .HasColumnType("boolean");

                            b1.Property<bool>("GrobRuecken")
                                .HasColumnType("boolean");

                            b1.Property<bool>("KeinBrust")
                                .HasColumnType("boolean");

                            b1.Property<bool>("KeinKraul")
                                .HasColumnType("boolean");

                            b1.Property<bool>("KeinRuecken")
                                .HasColumnType("boolean");

                            b1.HasKey("SchwimmerId");

                            b1.ToTable("schwimmer");

                            b1.WithOwner()
                                .HasForeignKey("SchwimmerId");
                        });

                    b.Navigation("Brust")
                        .IsRequired();

                    b.Navigation("Grundfertigkeiten")
                        .IsRequired();

                    b.Navigation("Kraul")
                        .IsRequired();

                    b.Navigation("Ruecken")
                        .IsRequired();

                    b.Navigation("Schwimmstile")
                        .IsRequired();
                });

            modelBuilder.Entity("Zeit", b =>
                {
                    b.HasOne("PunkteSystem.Model.Schwimmer", "Schwimmer")
                        .WithMany("Zeiten")
                        .HasForeignKey("SchwimmerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Schwimmer");
                });

            modelBuilder.Entity("PunkteSystem.Model.Gruppe", b =>
                {
                    b.Navigation("Schwimmers");
                });

            modelBuilder.Entity("PunkteSystem.Model.Schwimmer", b =>
                {
                    b.Navigation("Zeiten");
                });

            modelBuilder.Entity("PunkteSystem.Model.User", b =>
                {
                    b.Navigation("Gruppen");
                });
#pragma warning restore 612, 618
        }
    }
}
